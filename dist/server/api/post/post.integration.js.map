{"version":3,"sources":["../../../../server/api/post/post.integration.js"],"names":[],"mappings":"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","file":"post.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newPost;\n\ndescribe('Post API:', function() {\n\n  describe('GET /api/posts', function() {\n    var posts;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/posts')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          posts = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      posts.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/posts', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/posts')\n        .send({\n          name: 'New Post',\n          info: 'This is the brand new post!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newPost = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created post', function() {\n      newPost.name.should.equal('New Post');\n      newPost.info.should.equal('This is the brand new post!!!');\n    });\n\n  });\n\n  describe('GET /api/posts/:id', function() {\n    var post;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/posts/' + newPost._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          post = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      post = {};\n    });\n\n    it('should respond with the requested post', function() {\n      post.name.should.equal('New Post');\n      post.info.should.equal('This is the brand new post!!!');\n    });\n\n  });\n\n  describe('PUT /api/posts/:id', function() {\n    var updatedPost;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/posts/' + newPost._id)\n        .send({\n          name: 'Updated Post',\n          info: 'This is the updated post!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedPost = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedPost = {};\n    });\n\n    it('should respond with the updated post', function() {\n      updatedPost.name.should.equal('Updated Post');\n      updatedPost.info.should.equal('This is the updated post!!!');\n    });\n\n  });\n\n  describe('DELETE /api/posts/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/posts/' + newPost._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when post does not exist', function(done) {\n      request(app)\n        .delete('/api/posts/' + newPost._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}