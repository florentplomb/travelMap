{"version":3,"sources":["../../../../server/api/image/image.controller.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASC;;;;;QAsDe,K,GAAA,K;QAQA,I,GAAA,I;QAaA,M,GAAA,M;QAOA,M,GAAA,M;QAYA,O,GAAA,O;;AA5Ff;;;;AACA;;;;AACD;;;;;;AAEA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,UAAhC,EAA4C;AAC1C,eAAa,cAAc,GAA3B;AACA,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,MAAJ,EAAY;AACV,UAAI,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAA4B,MAA5B;AACD;AACF,GAJD;AAKD;;AAED,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,UAAU,iBAAE,KAAF,CAAQ,MAAR,EAAgB,OAAhB,CAAd;AACA,WAAO,QAAQ,IAAR,GACN,IADM,CACD,mBAAW;AACf,aAAO,OAAP;AACD,KAHM,CAAP;AAID,GAND;AAOD;;AAED,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,MAAJ,EAAY;AACV,aAAO,OAAO,MAAP,GACN,IADM,CACD,YAAM;AACV,YAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB;AACD,OAHM,CAAP;AAID;AACF,GAPD;AAQD;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACjC,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,CAAC,MAAL,EAAa;AACX,UAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB;AACA,aAAO,IAAP;AACD;AACD,WAAO,MAAP;AACD,GAND;AAOD;;AAED,SAAS,WAAT,CAAqB,GAArB,EAA0B,UAA1B,EAAsC;AACpC,eAAa,cAAc,GAA3B;AACA,SAAO,UAAS,GAAT,EAAc;AACnB,QAAI,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAA4B,GAA5B;AACD,GAFD;AAGD;;AAED;AACO,SAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB;AAC9B;AACA;AACA;AACA,SAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP;AACD;;AAED;AACO,SAAS,IAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB;AAC9B,kBAAM,QAAN,CAAe,IAAI,MAAJ,CAAW,EAA1B,EAA6B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAChD,QAAI,GAAJ,EAAS,OAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP,CAA6B;AACtC,QAAI,WAAJ,CAAgB,IAAI,GAAJ,CAAQ,WAAxB;AACA,WAAO,IAAI,IAAJ,CAAS,IAAI,GAAJ,CAAQ,IAAjB,CAAP;AACD,GAJA;;AAMC;AACA;AACA;AACD;;AAED;AACO,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAIhC;AAHC;AACA;AACA;;;AAGF;AACO,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AAC/B,MAAI,IAAI,IAAJ,CAAS,GAAb,EAAkB;AAChB,WAAO,IAAI,IAAJ,CAAS,GAAhB;AACD;AACD;AACA;AACA;AACA;AACA;AACD;;AAED;AACO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B;AAChC;AACA;AACA;AACA;AACD","file":"image.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/images              ->  index\r\n * POST    /api/images              ->  create\r\n * GET     /api/images/:id          ->  show\r\n * PUT     /api/images/:id          ->  update\r\n * DELETE  /api/images/:id          ->  destroy\r\n */\r\n\r\n 'use strict';\r\n\r\n import _ from 'lodash';\r\n import config from '../../config/environment';\r\nimport Image from './image.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if (entity) {\r\n      res.status(statusCode).json(entity);\r\n    }\r\n  };\r\n}\r\n\r\nfunction saveUpdates(updates) {\r\n  return function(entity) {\r\n    var updated = _.merge(entity, updates);\r\n    return updated.save()\r\n    .then(updated => {\r\n      return updated;\r\n    });\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if (entity) {\r\n      return entity.remove()\r\n      .then(() => {\r\n        res.status(204).end();\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if (!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Images\r\nexport function index(req, res) {\r\n  // return Image.find().exec()\r\n  //   .then(respondWithResult(res))\r\n  //   .catch(handleError(res));\r\n  return res.status(204).end();\r\n}\r\n\r\n// Gets a single Image from the DB\r\nexport function show(req, res) {\r\n Image.findById(req.params.id,function (err, doc) {\r\n  if (err) return res.status(404).end();;\r\n  res.contentType(doc.img.contentType);\r\n  return res.send(doc.img.data);\r\n});\r\n\r\n  //   .then(handleEntityNotFound(res))\r\n  //   .then(respondWithResult(res))\r\n  //   .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Image in the DB\r\nexport function create(req, res) {\r\n  // return Image.create(req.body)\r\n  //   .then(respondWithResult(res, 201))\r\n  //   .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Image in the DB\r\nexport function update(req, res) {\r\n  if (req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  // return Image.findById(req.params.id).exec()\r\n  //   .then(handleEntityNotFound(res))\r\n  //   .then(saveUpdates(req.body))\r\n  //   .then(respondWithResult(res))\r\n  //   .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Image from the DB\r\nexport function destroy(req, res) {\r\n  // return Image.findById(req.params.id).exec()\r\n  //   .then(handleEntityNotFound(res))\r\n  //   .then(removeEntity(res))\r\n  //   .catch(handleError(res));\r\n}\r\n"]}