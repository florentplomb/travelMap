{"version":3,"sources":["../../../../server/api/image/image.controller.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;;;;QAsDgB,K,GAAA,K;QAQA,I,GAAA,I;QAoBA,M,GAAA,M;QAOA,M,GAAA,M;QAYA,O,GAAA,O;;AAnGhB;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,UAAhC,EAA4C;AAC1C,eAAa,cAAc,GAA3B;AACA,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,MAAJ,EAAY;AACV,UAAI,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAA4B,MAA5B;AACD;AACF,GAJD;AAKD;;AAED,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,UAAU,iBAAE,KAAF,CAAQ,MAAR,EAAgB,OAAhB,CAAd;AACA,WAAO,QAAQ,IAAR,GACJ,IADI,CACC,mBAAW;AACf,aAAO,OAAP;AACD,KAHI,CAAP;AAID,GAND;AAOD;;AAED,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,MAAJ,EAAY;AACV,aAAO,OAAO,MAAP,GACJ,IADI,CACC,YAAM;AACV,YAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB;AACD,OAHI,CAAP;AAID;AACF,GAPD;AAQD;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACjC,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,CAAC,MAAL,EAAa;AACX,UAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB;AACA,aAAO,IAAP;AACD;AACD,WAAO,MAAP;AACD,GAND;AAOD;;AAED,SAAS,WAAT,CAAqB,GAArB,EAA0B,UAA1B,EAAsC;AACpC,eAAa,cAAc,GAA3B;AACA,SAAO,UAAS,GAAT,EAAc;AACnB,QAAI,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAA4B,GAA5B;AACD,GAFD;AAGD;;AAED;AACO,SAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB;AAC9B;AACA;AACA;AACC,SAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP;AACF;;AAED;AACO,SAAS,IAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB;;AAE9B,kBAAM,QAAN,CAAe,IAAI,MAAJ,CAAW,EAA1B,EAA8B,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzC,QAAI,GAAJ,EAAS,OAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP;AACT,QAAI,WAAJ,CAAgB,IAAI,GAAJ,CAAQ,WAAxB;AACA,QAAI,IAAJ,CAAS,IAAI,GAAJ,CAAQ,IAAjB;AACA,WAAO,GAAP;AACD,GALR;;AAQC;AACA;AACA;AACA;;AAID;;AAED;AACO,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAIhC;AAHC;AACA;AACA;;;AAGF;AACO,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AAC/B,MAAI,IAAI,IAAJ,CAAS,GAAb,EAAkB;AAChB,WAAO,IAAI,IAAJ,CAAS,GAAhB;AACD;AACD;AACA;AACA;AACA;AACA;AACD;;AAED;AACO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B;AAChC;AACA;AACA;AACA;AACD","file":"image.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/images              ->  index\n * POST    /api/images              ->  create\n * GET     /api/images/:id          ->  show\n * PUT     /api/images/:id          ->  update\n * DELETE  /api/images/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport config from '../../config/environment';\nimport Image from './image.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Images\nexport function index(req, res) {\n  // return Image.find().exec()\n  //   .then(respondWithResult(res))\n  //   .catch(handleError(res));\n   return res.status(204).end();\n}\n\n// Gets a single Image from the DB\nexport function show(req, res) {\n\n Image.findById(req.params.id, function (err, doc) {\n          if (err) return res.status(404).end();\n          res.contentType(doc.img.contentType);\n          res.send(doc.img.data);\n          return res;\n        });\n\n\n  // return Image.findById(req.params.id).exec()\n  //   .then(handleEntityNotFound(res))\n  //   .then(respondWithResult(res))\n  //   .catch(handleError(res));\n\n\n\n}\n\n// Creates a new Image in the DB\nexport function create(req, res) {\n  // return Image.create(req.body)\n  //   .then(respondWithResult(res, 201))\n  //   .catch(handleError(res));\n}\n\n// Updates an existing Image in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  // return Image.findById(req.params.id).exec()\n  //   .then(handleEntityNotFound(res))\n  //   .then(saveUpdates(req.body))\n  //   .then(respondWithResult(res))\n  //   .catch(handleError(res));\n}\n\n// Deletes a Image from the DB\nexport function destroy(req, res) {\n  // return Image.findById(req.params.id).exec()\n  //   .then(handleEntityNotFound(res))\n  //   .then(removeEntity(res))\n  //   .catch(handleError(res));\n}\n"]}